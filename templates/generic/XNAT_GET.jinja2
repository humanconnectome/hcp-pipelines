HCP_RUN_UTILS="{{ HCP_RUN_UTILS }}"
XNAT_PBS_JOBS="{{ XNAT_PBS_JOBS }}"
ARCHIVE_ROOT="{{ ARCHIVE_ROOT }}"

source ${HCP_RUN_UTILS}/shlib/log.shlib  # Logging related functions
source ${HCP_RUN_UTILS}/shlib/utils.shlib  # Utility functions
log_Msg "XNAT_PBS_JOBS: ${XNAT_PBS_JOBS}"
log_Msg "HCP_RUN_UTILS: ${HCP_RUN_UTILS}"
log_Msg "ARCHIVE_ROOT: ${ARCHIVE_ROOT}"


g_scan="{{ SUBJECT_EXTRA }}"    # used in functional only
g_project="{{ SUBJECT_PROJECT }}"
g_subject="{{ SUBJECT_ID }}"
g_classifier="{{ SUBJECT_CLASSIFIER }}"
g_working_dir="{{ WORKING_DIR }}"
{% if PIPELINE_NAME == "StructuralPreprocessing" -%}
# Use the prescan normalized versions of the T1w and T2w scans
{% if USE_PRESCAN_NORMALIZED -%}
g_use_prescan_normalized="TRUE"
{%- else -%}
g_use_prescan_normalized="FALSE"
{%- endif %}
{%- endif %}



show_job_start

show_platform_info

get_options "$@"

# Link CinaB-style data
log_Msg "Activating Python 3"
set_g_python_environment
source activate ${g_python_environment} 2>&1

mkdir -p ${g_working_dir}/tmp
mkdir -p ${g_working_dir}/${g_subject}_${g_classifier}

log_Msg "Getting CinaB-Style data"
${XNAT_PBS_JOBS}/lib/ccf/get_cinab_style_data.py \
    --project=${g_project} \
    --subject=${g_subject} \
    --classifier=${g_classifier} \
{% if PIPELINE_NAME == "FunctionalPreprocessing" -%}
    --scan=${g_scan} \
{%- endif %}
    --study-dir=${g_working_dir}/tmp \
    --phase=${GET_PHASE} \
    --remove-non-subdirs

{% if PIPELINE_NAME != "StructuralPreprocessing" -%}
find  ${g_working_dir}/tmp/${g_subject}_${g_classifier}/* -maxdepth 0 -type d ! -name "ProcessingInfo" -exec mv {} ${g_working_dir}/${g_subject}_${g_classifier} \;
rm -r ${g_working_dir}/tmp
{% else %}
	log_Msg "Moving files"
	mv ${g_working_dir}/tmp/* ${g_working_dir}

	log_Msg "Removing tmp dir"
	rmdir ${g_working_dir}/tmp

	if [ "${g_use_prescan_normalized}" = "TRUE" ]; then
		log_Msg "Setting up symlinks to enable use of prescan normalized scans"

		pushd ${g_working_dir}/${g_subject}_${g_classifier}/unprocessed

		t1dirs=$(ls -d T1w*)
		for t1dir in ${t1dirs} ; do
			pushd ${t1dir}
			other_files=$(ls OTHER_FILES)
			for other_file in ${other_files} ; do
				ln -s OTHER_FILES/${other_file}
			done
			popd
		done

		t2dirs=$(ls -d T2w*)
		for t2dir in ${t2dirs} ; do
			pushd ${t2dir}
			other_files=$(ls OTHER_FILES)
			for other_file in ${other_files} ; do
				ln -s OTHER_FILES/${other_file}
			done
			popd
		done

		popd
	fi
{% endif %}

log_Msg "Complete"



