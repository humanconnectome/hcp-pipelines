#!/usr/bin/env bash

# Load variables
source {{ XNAT_PBS_SETUP_SCRIPT_PATH }}

module load {{ SINGULARITY_VERSION }}

delete_resource(){
  #todo: determine if this needs to run in singularity container (probably)
  echo "Deleting the resource from the XNAT server"
  singularity exec \
    {{ SINGULARITY_CONTAINER_PIPELINES_PATH }} \
    python3 $XNAT_PBS_JOBS/lib/utils/delete_resource.py \
      --user="{{USERNAME}}" \
      --password="{{PASSWORD}}" \
      --server="{{PUT_SERVER}}" \
      --project="{{SUBJECT_PROJECT}}" \
      --subject="{{SUBJECT_ID}}" \
      --session="{{SUBJECT_SESSION}}" \
      --resource="{{OUTPUT_RESOURCE_NAME}}"
      --force
}

mark_running_status(){
  echo "Creating \"Running Status Marker\" file to indicate that jobs are queued."
  singularity exec \
    {{ SINGULARITY_CONTAINER_PIPELINES_PATH }} \
    $XNAT_PBS_JOBS/{{ PIPELINE_NAME }}/{{ PIPELINE_NAME }}.XNAT_MARK_RUNNING_STATUS \
      --user={{USERNAME}} \
      --password={{PASSWORD}} \
      --server={{PUT_SERVER}} \
      --project={{SUBJECT_PROJECT}} \
      --subject={{SUBJECT_ID}} \
      --classifier={{SUBJECT_CLASSIFIER}} \
{%- if PIPELINE_NAME == "FunctionalPreprocessing" %}
      --scan={{SUBJECT_EXTRA}} \
{%- endif %}
      --resource=RunningStatus \
      --queued
}
{% if CLEAN_OUTPUT_RESOURCE is defined and CLEAN_OUTPUT_RESOURCE %}
  # Delete the resource first
  delete_resource
{% else %}
  ### Deleting the resource first has been disabled
  ### Uncomment line below to re-enable
  #delete_resource
{% endif %}

# Run Script to create running status marker file
mark_running_status


# Chain the scripts onto the PBS
PRIOR_JOB=$(qsub {{ GET_DATA_JOB_SCRIPT_NAME }})
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ PROCESS_DATA_JOB_SCRIPT_NAME }})
{% if FREESURFER_SCRIPT_NAME is defined %}
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ FREESURFER_SCRIPT_NAME }})
{% endif %}
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ CLEAN_DATA_SCRIPT_NAME }})
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ PUT_DATA_SCRIPT_NAME }})
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ CHECK_DATA_JOB_SCRIPT_NAME }})


# Don't comment out, this should always run last
# This cleans up the running status marker
PRIOR_JOB=$(qsub -W depend=afterany:$PRIOR_JOB {{ MARK_NO_LONGER_RUNNING_SCRIPT_NAME }})

