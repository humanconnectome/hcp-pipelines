#!/usr/bin/env bash

mark_running_status(){
    echo "Creating \"Running Status Marker\" file to indicate that jobs are queued."
    {{ MARK_RUNNING_STATUS_RUNPATH }} \
        --status=queued
}
submit(){
    if [ -z "$PRIOR_JOBID" ]; then
        PRIOR_JOBID=$(sbatch $1 | tr " " '\n' | tail -1)
    elif [ "$2" == "afterany" ]; then
        PRIOR_JOBID=$(sbatch --dependency=afterany:$PRIOR_JOBID $1 | tr " " '\n' | tail -1)
    else
        PRIOR_JOBID=$(sbatch --dependency=afterok:$PRIOR_JOBID $1 | tr " " '\n' | tail -1)
    fi
}


### List of generated scripts
GET="{{ GET_DATA_JOB_SCRIPT_NAME }}"
PROCESS="{{ PROCESS_DATA_JOB_SCRIPT_NAME }}"
CLEAN="{{ CLEAN_DATA_SCRIPT_NAME }}"
PUT="{{ PUT_DATA_SCRIPT_NAME }}"
CHECK="{{ CHECK_DATA_JOB_SCRIPT_NAME }}"
NO_LONGER_RUNNING="{{ MARK_NO_LONGER_RUNNING_SCRIPT_NAME }}"

### Chain the scripts onto the PBS
{%- set stages=['GET','PROCESS','CLEAN','PUT','CHECK'] %}
first_run(){
{%- for job in stages[:STAGE] %}
    submit ${{ job }}
{%- endfor %}
}
second_run(){
    echo "CONTINUE PROCESSING"
{%- for job in stages[STAGE:] %}
    submit ${{ job }}
{%- endfor %}
}



### Run Script to create running status marker file
mark_running_status

if [[ $* == *--continue* ]]; then
    second_run
else
    first_run
fi


### This cleans up the running status marker and should always run last
submit $NO_LONGER_RUNNING afterany

### Export variable in case attempting to chain multiple jobs in series
export PRIOR_JOBID
