#!/usr/bin/env bash

function delete_resource(){
#todo: resolve actual path of delete_resource
#todo: determine if this needs to run in singularity container (probably)
/pipeline_tools/.../lib/utils/delete_resource.py \
    --user="{{USERNAME}}" \
    --password="{{PASSWORD}}" \
    --server="{{PUT_SERVER}}" \
    --project="{{SUBJECT_PROJECT}}" \
    --subject="{{SUBJECT_ID}}" \
    --session="{{SUBJECT_SESSION}}" \
    --resource="{{SUBJECT_EXTRA}}_{{OUTPUT_RESOURCE_SUFFIX}}"
    --force

}
{% if CLEAN_OUTPUT_RESOURCE is defined and CLEAN_OUTPUT_RESOURCE %}
  delete_resource
{% else %}
  ### Deleting the resource first has been disabled
  ### Uncomment line below to re-enable
  #delete_resource
{% endif %}

PRIOR_JOB=$(qsub {{ GET_DATA_JOB_SCRIPT_NAME }})
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ PROCESS_DATA_JOB_SCRIPT_NAME }})
{% if FREESURFER_SCRIPT_NAME is defined %}
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ FREESURFER_SCRIPT_NAME }})
{% endif %}
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ CLEAN_DATA_SCRIPT_NAME }})
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ PUT_DATA_SCRIPT_NAME }})
PRIOR_JOB=$(qsub -W depend=afterok:$PRIOR_JOB {{ CHECK_DATA_JOB_SCRIPT_NAME }})


# Don't comment out, this should always run last
PRIOR_JOB=$(qsub -W depend=afterany:$PRIOR_JOB {{ MARK_NO_LONGER_RUNNING_SCRIPT_NAME }})