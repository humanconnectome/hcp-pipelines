#!/bin/bash

set -e
g_script_name=$(basename "${0}")

if [ -z "${XNAT_PBS_JOBS}" ]; then
	echo "${g_script_name}: ABORTING: XNAT_PBS_JOBS environment variable must be set"
	exit 1
fi

if [ -z "${HCP_RUN_UTILS}" ]; then
	echo "${g_script_name}: ABORTING: HCP_RUN_UTILS environment variable must be set"
	exit 1
fi

source ${HCP_RUN_UTILS}/shlib/log.shlib  # Logging related functions
source ${HCP_RUN_UTILS}/shlib/utils.shlib  # Utility functions
log_Msg "XNAT_PBS_JOBS: ${XNAT_PBS_JOBS}"
log_Msg "HCP_RUN_UTILS: ${HCP_RUN_UTILS}"

usage()
{
	cat <<EOF

Get data from the XNAT archive necessary to run Structural Preprocessing pipeline

Usage: ${g_script_name} PARAMETER..."

PARAMETERs are [ ] = optional; < > = user supplied value
  [--help]                   : show usage information and exit with non-zero return code
   --project=<project>       : XNAT project (e.g. HCP_500)
   --subject=<subject>       : XNAT subject ID within project (e.g. 100307)
   --classifier=<classifier> : XNAT session classifier (e.g. 3T, 7T, MR, V1, V2, etc.)
   --working-dir=<dir>       : Working directory in which to place retrieved data
                               and in which to produce results
   --use-prescan-normalized  : Use the prescan normalized versions of the T1w and T2w scans

EOF
}

get_options()
{
	local arguments=($@)

	# initialize global output variables
	unset g_project
	unset g_subject
	unset g_classifier
	unset g_working_dir
	g_use_prescan_normalized="FALSE"
	g_delay_seconds=0
	
	# parse arguments
	local num_args=${#arguments[@]}
	local argument
	local index=0

	while [ ${index} -lt ${num_args} ]; do
		argument=${arguments[index]}

		case ${argument} in
			--help)
				usage
				exit 1
				;;
			--project=*)
				g_project=${argument#*=}
				index=$(( index + 1 ))
				;;
			--subject=*)
				g_subject=${argument#*=}
				index=$(( index + 1 ))
				;;
			--classifier=*)
				g_classifier=${argument#*=}
				index=$(( index + 1 ))
				;;
			--working-dir=*)
				g_working_dir=${argument#*=}
				index=$(( index + 1 ))
				;;
			--delay-seconds=*)
				g_delay_seconds=${argument#*=}
				index=$(( index + 1 ))
				;;
			--use-prescan-normalized)
				g_use_prescan_normalized="TRUE"
				index=$(( index + 1 ))
				;;
			*)
				usage
				log_Err_Abort "unrecognized option ${argument}"
				;;
		esac
	done

	local error_msgs=""

	# check required parameters
	if [ -z "${g_project}" ]; then
		error_msgs+="\nERROR: project (--project=) required"
	else
		log_Msg "g_project: ${g_project}"
	fi

	if [ -z "${g_subject}" ]; then
		error_msgs+="\nERROR: subject (--subject=) required"
	else
		log_Msg "g_subject: ${g_subject}"
	fi

	if [ -z "${g_classifier}" ]; then
		g_classifier="3T"
	fi
	log_Msg "g_classifier: ${g_classifier}"
	
	if [ -z "${g_working_dir}" ]; then
		error_msgs+="\nERROR: working directory (--working-dir=) required"
	else
		log_Msg "g_working_dir: ${g_working_dir}"
	fi

	log_Msg "g_delay_seconds: ${g_delay_seconds}"

	log_Msg "g_use_prescan_normalized: ${g_use_prescan_normalized}"
	
	if [ ! -z "${error_msgs}" ]; then
		usage
		log_Err_Abort ${error_msgs}
	fi
}

main()
{
	show_job_start

	show_platform_info

	get_options "$@"

	# sleep a little to try to ensure job is not complete before processing job gets submitted
	log_Msg "Sleeping for ${g_delay_seconds} seconds to allow submittal of processing job before this job completes"
	sleep ${g_delay_seconds}
	
	# Link CinaB-style data
	log_Msg "Activating Python 3"
	set_g_python_environment
	source activate ${g_python_environment} 2>&1

	log_Msg "Making tmp directory for data retrieval: ${g_working_dir}/tmp"
	mkdir -p ${g_working_dir}/tmp
	log_Msg "Made tmp directory: ${g_working_dir}/tmp"
	ls -ld ${g_working_dir}/tmp

	log_Msg "---------------------------------"
	log_Msg "Contents of tmp directory follow:"
	log_Msg "---------------------------------"
	ls ${g_working_dir}/tmp
	
	log_Msg "Getting CinaB-Style data"
	${XNAT_PBS_JOBS}/lib/ccf/get_cinab_style_data.py \
		--project=${g_project} \
		--subject=${g_subject} \
		--classifier=${g_classifier} \
		--study-dir=${g_working_dir}/tmp \
		--phase=struct_preproc_prereqs \
		--remove-non-subdirs
	log_Msg "Got CinaB-Style data"

	log_Msg "---------------------------------"
	log_Msg "Contents of tmp directory follow:"
	log_Msg "---------------------------------"
	ls ${g_working_dir}/tmp

	
	log_Msg "Moving files"
	mv ${g_working_dir}/tmp/* ${g_working_dir}

	log_Msg "Removing tmp dir"
	rmdir ${g_working_dir}/tmp

	if [ "${g_use_prescan_normalized}" = "TRUE" ]; then
		log_Msg "Setting up symlinks to enable use of prescan normalized scans"

		pushd ${g_working_dir}/${g_subject}_${g_classifier}/unprocessed

		t1dirs=$(ls -d T1w*)
		for t1dir in ${t1dirs} ; do
			pushd ${t1dir}
			other_files=$(ls OTHER_FILES)
			for other_file in ${other_files} ; do
				ln -s OTHER_FILES/${other_file}
			done
			popd
		done

		t2dirs=$(ls -d T2w*)
		for t2dir in ${t2dirs} ; do
			pushd ${t2dir}
			other_files=$(ls OTHER_FILES)
			for other_file in ${other_files} ; do
				ln -s OTHER_FILES/${other_file}
			done
			popd
		done

		popd
	fi
	
	log_Msg "Complete"
}

# Invoke the main to get things started
main "$@"
